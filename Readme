# ?? FinanblueBackend

Projeto backend desenvolvido em **C# (.NET 8)** utilizando **Dapper** como ORM, por questões de padronização dos projetos da **Finanblue**.

---

## ?? Estrutura de Camadas do Projeto

### ?? Model (ou Entidade)

**O que é:**  
Representa os dados do sistema. Reflete uma tabela do banco de dados ou um objeto real (ex: Usuário, Produto, Cliente, Pedido).

**Função:**  
Guardar as propriedades e tipos de dados que o sistema usa.

**Exemplo:**
```csharp
public class Usuario 
{
    public int Id { get; set; }
    public string Nome { get; set; }
    public string Email { get; set; }
}
??? Database
O que é:
É a camada que faz a conexão direta com o banco de dados.
Com o Dapper, ela serve para abrir conexões e executar queries.

Função:

Gerenciar a conexão (abrir/fechar)

Centralizar a string de conexão

Evitar repetição de código SQL

Exemplo:

csharp
Copiar código
using System.Data;
using System.Data.SqlClient;
using Microsoft.Extensions.Configuration;

public class DbContextDapper
{
    private readonly IConfiguration _config;
    private readonly string _connectionString;

    public DbContextDapper(IConfiguration config)
    {
        _config = config;
        _connectionString = _config.GetConnectionString("DefaultConnection");
    }

    public IDbConnection CreateConnection()
    {
        return new SqlConnection(_connectionString);
    }
}
?? Repository
O que é:
Camada responsável por conversar com o banco de dados.
Ela utiliza o DbContextDapper para executar comandos SQL (SELECT, INSERT, UPDATE, DELETE).

Função:

Executar queries SQL

Converter resultados em objetos (Model)

Manter o acesso a dados separado da lógica de negócio

Exemplo:

csharp
Copiar código
using Dapper;

public class UsuarioRepository
{
    private readonly DbContextDapper _context;

    public UsuarioRepository(DbContextDapper context)
    {
        _context = context;
    }

    public IEnumerable<Usuario> GetUsuarios()
    {
        using var connection = _context.CreateConnection();
        return connection.Query<Usuario>("SELECT * FROM Usuarios");
    }

    public int AddUsuario(Usuario user)
    {
        using var connection = _context.CreateConnection();
        string sql = "INSERT INTO Usuarios (Nome, Email) VALUES (@Nome, @Email)";
        return connection.Execute(sql, user);
    }
}
?? Service
O que é:
Camada intermediária entre a Controller e o Repository.
É responsável por conter as regras de negócio e validações.

Função:

Validar dados

Processar regras (cálculos, verificações, duplicidades)

Chamar o repositório

Garantir que a Controller lide apenas com requisições

Exemplo:

csharp
Copiar código
public class UsuarioService
{
    private readonly UsuarioRepository _repository;

    public UsuarioService(UsuarioRepository repository)
    {
        _repository = repository;
    }

    public IEnumerable<Usuario> ListarUsuarios()
    {
        return _repository.GetUsuarios();
    }

    public string CadastrarUsuario(Usuario user)
    {
        if (string.IsNullOrEmpty(user.Email))
            throw new Exception("Email é obrigatório!");

        _repository.AddUsuario(user);
        return "Usuário cadastrado com sucesso!";
    }
}
?? Controller
O que é:
Ponto de entrada da API — recebe requisições HTTP do frontend (Angular) e retorna respostas.

Função:

Receber e responder requisições da Web (GET, POST, PUT, DELETE)

Chamar o Service

Retornar resultados geralmente em JSON

Exemplo:

csharp
Copiar código
using Microsoft.AspNetCore.Mvc;

[ApiController]
[Route("api/[controller]")]
public class UsuarioController : ControllerBase
{
    private readonly UsuarioService _service;

    public UsuarioController(UsuarioService service)
    {
        _service = service;
    }

    [HttpGet]
    public IActionResult GetUsuarios()
    {
        var usuarios = _service.ListarUsuarios();
        return Ok(usuarios);
    }

    [HttpPost]
    public IActionResult AddUsuario([FromBody] Usuario user)
    {
        var msg = _service.CadastrarUsuario(user);
        return Ok(msg);
    }
}
?? Fluxo de Requisição
css
Copiar código
[ Angular / Frontend ]
          ?
[ Controller ]  ? recebe a requisição HTTP
          ?
[ Service ]  ? contém regras de negócio e validações
          ?
[ Repository ]  ? executa SQL no banco
          ?
[ Database ]  ? cria e gerencia a conexão
          ?
[ Model ]  ? representa a estrutura dos dados
??? Estrutura do Projeto
mathematica
Copiar código
FinanblueBackend/
¦
+-- Connected Services/
+-- Dependencies/
+-- Properties/
+-- wwwroot/
+-- Pages/
+-- appsettings.json
+-- Program.cs
+-- Readme.md
?? Descrição das Pastas e Arquivos
Pasta / Arquivo	Função Principal
Connected Services	Integração com serviços externos (Azure, APIs, etc).
Dependencies	Bibliotecas NuGet do projeto.
Properties	Configurações de execução (porta, ambiente, etc).
wwwroot	Arquivos estáticos (imagens, CSS, JS).
Pages	Páginas Razor (usadas em MVC, podem ser removidas se for apenas API).
appsettings.json	Configurações e strings de conexão do sistema.
Program.cs	Ponto de entrada e configuração do servidor.
Readme.md	Documentação do projeto.

?? Arquivo appsettings.json
Configuração básica do sistema, equivalente ao .env de um projeto Node.js.

json
Copiar código
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=localhost;Database=FinanblueDB;User Id=sa;Password=1234;"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information"
    }
  },
  "AllowedHosts": "*"
}
?? Arquivo Program.cs
Ponto de inicialização do backend.
Aqui são configurados os serviços, middlewares e endpoints da API.

csharp
Copiar código
var builder = WebApplication.CreateBuilder(args);

// Configura serviços
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Configura o pipeline
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseAuthorization();
app.MapControllers();
app.Run();
?? Conclusão
Essa arquitetura garante:

Organização e separação de responsabilidades;

Reuso e manutenção facilitada do código;

Facilidade para escalar e adicionar novas funcionalidades;

Integração direta e performática com SQL Server via Dapper.

?? Autor: Gilson Fonseca
?? Email: gilsonfonseca92@gmail.com
?? GitHub: gildevson
?? Empresa: Finanblue

yaml
Copiar código

---

Deseja que eu adicione um **diagrama visual (em ASCII ou mermaid)** mostrando o fluxo completo (Frontend ? Controller ? Service ? Repository ? Database ? SQL)?  
Fica ótimo no README.






